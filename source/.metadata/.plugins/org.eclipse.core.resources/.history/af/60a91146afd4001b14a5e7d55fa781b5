package service;

import java.io.InputStreamReader;
import java.io.StringReader;
import java.io.UnsupportedEncodingException;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;

import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;

import oracle.sql.ARRAY;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;

public class Covidservice {
	public List<Map<String,String>> selectlist()  {
		//반환값
		List<Map<String,String>> covidlist = new ArrayList<>();
		//Map<String,String> covidmap = new HashMap<>();
		
		try {
			//코로나 현황 조회
			String ServiceKey = "QCSbt4qH3V%2BAwpf8eh1Lxo4sUsJ%2FCf070Hfdtct0QBisRxP%2BPGqoeYxLs9QKlA3PkxbFjtszhc55QYf0%2BToQsA%3D%3D";
			 //String ServiceKey = "uMngqDWghlCUM7FKSQhTMPHD6Pw05QrJz2IoKje4tLozlhVZNfN1V6d78mbWCXI8Pixkrmhtd8vWQiMEwntxEA%3D%3D";
			StringBuilder urlBuilder = new StringBuilder("http://openapi.data.go.kr/openapi/service/rest/Covid19/getCovid19InfStateJson"); /*URL*/
	        urlBuilder.append("?" + URLEncoder.encode("ServiceKey","UTF-8") + "=" + ServiceKey); /*Service Key*/
	        urlBuilder.append("&" + URLEncoder.encode("ServiceKey","UTF-8") + "=" + URLEncoder.encode("-", "UTF-8")); /*공공데이터포털에서 받은 인증키*/
	        urlBuilder.append("&" + URLEncoder.encode("pageNo","UTF-8") + "=" + URLEncoder.encode("1", "UTF-8")); /*페이지번호*/
	        urlBuilder.append("&" + URLEncoder.encode("numOfRows","UTF-8") + "=" + URLEncoder.encode("10", "UTF-8")); /*한 페이지 결과 수*/
	        urlBuilder.append("&" + URLEncoder.encode("startCreateDt","UTF-8") + "=" + URLEncoder.encode("20210619", "UTF-8")); /*검색할 생성일 범위의 시작*/
	        urlBuilder.append("&" + URLEncoder.encode("endCreateDt","UTF-8") + "=" + URLEncoder.encode("20210624", "UTF-8")); /*검색할 생성일 범위의 종료*/
	        String url = urlBuilder.toString();
	        System.out.println(urlBuilder.toString());

		    //xml파싱
	        Document doc = DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(url);
			NodeList nodelist= doc.getElementsByTagName("item");
			//System.out.println("데이터 개수"+nodelist.getLength());
				 
			for(int i = 0; i < nodelist.getLength(); i++) {
				NodeList cnodelist= nodelist.item(i).getChildNodes();  //자식 노드들
				//System.out.println(i + ":" + cnodelist.getLength());
				
				Map<String,String> covidmap = new HashMap<>();
				for(int j = 0; j < cnodelist.getLength(); j++) {
					Node node= cnodelist.item(j);
					//System.out.println(node.getNodeName() + ":" + node.getTextContent());
					if(node.getNodeType() == Node.ELEMENT_NODE) {
						covidmap.put(node.getNodeName(), node.getTextContent());
					}
				}
				covidlist.add(covidmap);
			}
		}catch(Exception e){
			e.printStackTrace();
			System.out.println("예외");
		}
		
		//System.out.println(covidlist);
	    return covidlist;
	}
}
